set nocompatible
let mapleader = ","

call plug#begin('~/.vim/plugged')
Plug 'Shougo/neocomplete.vim'
Plug 'Shougo/neosnippet'
Plug 'Shougo/neosnippet-snippets'
"Plug 'ervandew/supertab'
"Plug 'Valloric/YouCompleteMe'
Plug 'Shougo/vimproc.vim'
Plug 'nvie/vim-togglemouse'
Plug 'bling/vim-bufferline'
" Package 'util-linux' needed
" for neocomplete only
Plug 'ujihisa/neco-look'
Plug 'jiangmiao/auto-pairs'
Plug 'honza/vim-snippets'

" For Ansible formatting
Plug 'chase/vim-ansible-yaml'
" For Go Language formatting
Plug 'jnwhiteh/vim-golang'
" For HTML/CSS formatting
Plug 'mattn/emmet-vim'
" For Chef script formatting
Plug 't9md/vim-chef'

Plug 'scrooloose/syntastic'
call plug#end()

filetype plugin indent on
syntax on
set t_Co=256
colorscheme molokai
" colorscheme settings
let g:molokai_original = 1
let g:rehash256 = 1

set encoding=utf8
set ffs=unix,dos,mac
set undofile
set undolevels=1000
set undodir=~/.vim/undo//
set noswapfile

set wildignorecase
set wildmode=longest:full,full
set wildmenu

set mouse=a

highlight Normal ctermbg=none
highlight LineNr ctermbg=none
highlight CursorLine  cterm=none ctermbg=black guifg=none guibg=black
highlight CursorLineNr ctermbg=black
set cursorline
highlight ColorColumn ctermbg=black guibg=black
highlight Visual ctermbg=darkgrey 
set number
set ruler
set title
set noerrorbells
"set list
"set listchars=tab:>.,trail:.,extends:#,nbsp:.
set autochdir
set autoread

set history=1000
set scrolloff=999
set hidden

set backspace=eol,start,indent
set whichwrap+=<,>,h,l

set ignorecase smartcase
set incsearch
set showmatch

set lazyredraw
set magic

set expandtab smarttab
set textwidth=0
set shiftwidth=4
set tabstop=4
nmap <silent> <leader>s :set spell!<CR>

"set linebreak
set wrap
" more natural behavior when moving between wrapped lines
nnoremap j gj
nnoremap k gk
nnoremap <down> gj
nnoremap <up> gk

set autoindent smartindent
set clipboard=unnamedplus

autocmd BufNewFile,BufRead *.spec call Spec_settings()
autocmd BufNewFile,BufRead *.sh call Sh_settings()

function! Spec_settings()
    setlocal colorcolumn=80
    setlocal textwidth=80
    setlocal nowrap
endfunction

function! Sh_settings()
    setlocal colorcolumn=80
    "setlocal textwidth=80
    setlocal shiftwidth=2
    setlocal softtabstop=2
endfunction

" make life easier
nnoremap ; :

vmap Q gq
nmap Q gqap

" ----- auto paste mode -----
function! WrapForTmux(s)
  if !exists('$TMUX')
    return a:s
  endif

  let tmux_start = "\<Esc>Ptmux;"
  let tmux_end = "\<Esc>\\"

  return tmux_start . substitute(a:s, "\<Esc>", "\<Esc>\<Esc>", 'g') . tmux_end
endfunction

let &t_SI .= WrapForTmux("\<Esc>[?2004h\e[3 q")
let &t_EI .= WrapForTmux("\<Esc>[?2004l\e[2 q")

function! XTermPasteBegin()
  set pastetoggle=<Esc>[201~
  set paste
  return ""
endfunction

inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()

" ----- switch cursor shape in insert mode (only works with xterm/rxvt/gnome-terminal + tmux) ------
" works remotelu as well
"if exists('$TMUX')
"    let &t_SI = "\<Esc>Ptmux;\<Esc>\e[3 q\<Esc>\\"
"    let &t_EI = "\<Esc>Ptmux;\<Esc>\e[2 q\<Esc>\\"
"    " 1 or 0 -> blinking block
"    " 3 -> blinking underscore
"    " Recent versions of xterm (282 or above) also support
"    " 5 -> blinking vertical bar
"    " 6 -> solid vertical bar
"else
"    let &t_SI = "\e[3 q"
"    let &t_EI = "\e[2 q"
"endif

" ----- neocomplete --------
" <TAB>: completion
" Not needed
"inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1

" Enable snipMate compatibility feature.
let g:neosnippet#enable_snipmate_compatibility = 1

" Define keyword. Avoid recording whole line as a keyword
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Tell Neosnippet about the other snippets
"let g:neosnippet#snippets_directory='~/.vim/plugged/vim-snippets/snippets'

" ----- neosnippet -----
"imap <S-Tab>     <Plug>(neosnippet_expand_or_jump)
"smap <S-Tab>     <Plug>(neosnippet_expand_or_jump)
"xmap <S-Tab>     <Plug>(neosnippet_expand_target)

" Customized TAB priorities in insert mode: expand snippet > popup menu item > jump selection > regular
" tab
"imap <expr><TAB>
" \ pumvisible() ?
" \ neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<C-n>" :
" \ neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

imap <expr><TAB>
    \ pumvisible() ?
    \ neosnippet#expandable() ? "\<Plug>(neosnippet_expand)" : "\<C-n>"
    \ :
    \ neosnippet#expandable() ? "\<Plug>(neosnippet_expand)" :
    \ neosnippet#jumpable() ? "\<Plug>(neosnippet_jump)" : "\<TAB>"

" jump to next selection with tab in select mode
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" ----- bufferline -----
"let g:bufferline_echo = 1
set laststatus=2
let g:bufferline_echo = 0
" Have to specify cterm=none otherwise won't work
highlight StatusLineNC cterm=none ctermbg=black
" Specify statusline text
autocmd VimEnter *
    \ let &statusline='%{bufferline#refresh_status()}'
    \ .bufferline#get_status_string().'%=%y %p%% '

noremap <Tab> :bnext<CR>

" Not really a good idea for remote access
" ----- switch cursor shape in gnome terminal -----
"if has("autocmd")
"    au InsertEnter *
"        \ if v:insertmode == 'i' |
"        \   silent execute "!~/.vim/gnome-terminal-cursor-shape.sh ibeam" |
"        \ elseif v:insertmode == 'r' |
"        \   silent execute "!~/.vim/gnome-terminal-cursor-shape.sh underline" |
"        \ endif
"    au InsertLeave * silent execute "!~/.vim/gnome-terminal-cursor-shape.sh block"
"    au VimLeave * silent execute "!~/.vim/gnome-terminal-cursor-shape.sh block"
"endif

" ----- Ansible -----
autocmd BufNewFile,BufRead *.yml setlocal ft=ansible

