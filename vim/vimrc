set nocompatible
let mapleader = ","

call plug#begin('~/.vim/plugged')
" async library reuiqred for neocomplete
" needed to run 'make'
Plug 'Shougo/vimproc.vim'
" neocomplete plugins
Plug 'Shougo/neocomplete.vim'
Plug 'Shougo/neosnippet'
Plug 'Shougo/neosnippet-snippets'
Plug 'honza/vim-snippets'
" vocabs completion for neocomplete only
" Package 'util-linux' needed to be installed
Plug 'ujihisa/neco-look'

" syntax checking
Plug 'scrooloose/syntastic'

" commenting lines
Plug 'scrooloose/nerdcommenter'
" qoutes/brackets completion
Plug 'jiangmiao/auto-pairs'

" f12 mouse mode toggle 
Plug 'nvie/vim-togglemouse'
" minimal buffer list
Plug 'bling/vim-bufferline'

" For Ansible formatting
Plug 'chase/vim-ansible-yaml'
" For Go Language formatting
Plug 'jnwhiteh/vim-golang'
" For HTML/CSS formatting
Plug 'mattn/emmet-vim'
" For Chef script formatting
Plug 't9md/vim-chef'
call plug#end()

" turn on basic plugin and indent support
filetype plugin indent on
" syntax highlighting
syntax on
" force 256 colors
set t_Co=256
colorscheme molokai
" molokai colorscheme settings
let g:molokai_original = 1
let g:rehash256 = 1

set encoding=utf8
" use unix newline bu default
set ffs=unix,dos,mac
" create separate files for undo records
set undofile
set undolevels=1000
" specify path for undo record files.
" specfiy // to include full path in the filename to avoid filename conflicts 
set undodir=~/.vim/undo//
" no .swp file
set noswapfile

" custom completion behaviors for command line
set wildignorecase
set wildmode=longest:full,full
set wildmenu

" mouse support
set mouse=a

" transparent background
highlight Normal ctermbg=none
" line number color
highlight LineNr ctermbg=none
" define color for current line focused by cursor
highlight CursorLine  cterm=none ctermbg=black guifg=none guibg=black
" for current line number
highlight CursorLineNr ctermbg=black
" enable current line highlight
set cursorline
" color for highlighted column
highlight ColorColumn ctermbg=black guibg=black
" color for highlighted text in visual mode
highlight Visual ctermbg=darkgrey 
" enable linux number
set number
set ruler
"set title

" mute the sound effects
set noerrorbells

" changing pwd to where the file located automatically
set autochdir
" auto read file changes
set autoread

set history=1000
set scrolloff=999
" hide the current file when another file is opened
set hidden

" fix backspace
set backspace=eol,start,indent
" automatically move to the previous/next line after reaching first/last character in the line 
set whichwrap+=<,>,h,l,[,]

" case insensitive and change to sensitive if the first character is upper
" while searching
set ignorecase smartcase
set incsearch
set showmatch
" regex pattern: make every following character except a-zA-Z0-9 and '_' have special meaning
" no \ needed
set magic

" for better performance
set lazyredraw

" convert tab to spaces
set expandtab smarttab
set shiftwidth=4
set tabstop=4

" break the line if it reach character limit (textwidth) 
set textwidth=0
set linebreak
set wrap
" more natural behavior when moving between wrapped lines
nnoremap j gj
nnoremap k gk
nnoremap <down> gj
nnoremap <up> gk

" auto indention
set autoindent smartindent

" share vim clipboard to system clipboard (vimx or gvim -v needed)
set clipboard=unnamedplus

" ----- settings for particular filetypes -----
autocmd BufNewFile,BufRead *.spec call Spec_settings()
autocmd BufNewFile,BufRead *.sh call Sh_settings()

function! Spec_settings()
    setlocal colorcolumn=80
    setlocal textwidth=80
    setlocal nowrap
endfunction

function! Sh_settings()
    setlocal colorcolumn=80
    "setlocal textwidth=80
    setlocal shiftwidth=2
    setlocal softtabstop=2
endfunction

" make life easier
nnoremap ; :

" for joining paragraphs
vmap Q gq
nmap Q gqap

" shortcut to turn on spelling check
nmap <silent> <leader>s :set spell!<CR>

" ----- auto paste mode -----
" tmux wrapper
function! WrapForTmux(s)
  if !exists('$TMUX')
    return a:s
  endif

  let tmux_start = "\<Esc>Ptmux;"
  let tmux_end = "\<Esc>\\"

  return tmux_start . substitute(a:s, "\<Esc>", "\<Esc>\<Esc>", 'g') . tmux_end
endfunction

" \e[3 q and \e[2 q added to the end to enable cursor shape switching
" tested on xterm/rxvt/gnome-terminal + tmux
" send terminal escape when insert mode starts
let &t_SI .= WrapForTmux("\<Esc>[?2004h\e[3 q")
" send terminal escape when insert mode ends
let &t_EI .= WrapForTmux("\<Esc>[?2004l\e[2 q")

function! XTermPasteBegin()
  set pastetoggle=<Esc>[201~
  set paste
  return ""
endfunction

inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()

" **combined with auto paste mode
" ----- switch cursor shape in insert mode (only works with xterm/rxvt/gnome-terminal + tmux) ------
" works remotelu as well
"if exists('$TMUX')
"    let &t_SI = "\<Esc>Ptmux;\<Esc>\e[3 q\<Esc>\\"
"    let &t_EI = "\<Esc>Ptmux;\<Esc>\e[2 q\<Esc>\\"
"    " 1 or 0 -> blinking block
"    " 3 -> blinking underscore
"    " Recent versions of xterm (282 or above) also support
"    " 5 -> blinking vertical bar
"    " 6 -> solid vertical bar
"else
"    let &t_SI = "\e[3 q"
"    let &t_EI = "\e[2 q"
"endif

" ----- neocomplete --------
" <TAB>: completion
" Not needed
" inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1

" Enable snipMate compatibility feature.
let g:neosnippet#enable_snipmate_compatibility = 1

" Define keyword. Avoid recording whole line as a keyword
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Tell Neosnippet about the other snippets
"let g:neosnippet#snippets_directory='~/.vim/plugged/vim-snippets/snippets'

" ----- neosnippet -----
"imap <S-Tab>     <Plug>(neosnippet_expand_or_jump)
"smap <S-Tab>     <Plug>(neosnippet_expand_or_jump)
"xmap <S-Tab>     <Plug>(neosnippet_expand_target)

"imap <expr><TAB>
" \ pumvisible() ?
" \ neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<C-n>" :
" \ neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" Customized TAB priorities in insert mode: expand snippet > popup menu item > jump selection > regular
" tab
imap <expr><TAB>
    \ pumvisible() ?
    \ neosnippet#expandable() ? "\<Plug>(neosnippet_expand)" : "\<C-n>"
    \ :
    \ neosnippet#expandable() ? "\<Plug>(neosnippet_expand)" :
    \ neosnippet#jumpable() ? "\<Plug>(neosnippet_jump)" : "\<TAB>"

" jump to next selection with tab in select mode
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" ----- bufferline -----
set laststatus=2
let g:bufferline_echo = 0
" Have to specify cterm=none otherwise won't work
highlight StatusLineNC cterm=none ctermbg=black
" Specify statusline text
autocmd VimEnter *
    \ let &statusline='%{bufferline#refresh_status()}'
    \ .bufferline#get_status_string().'%=%y %p%% '

" use Tab for switching file in normal mode
noremap <Tab> :bnext<CR>

" ----- Ansible -----
autocmd BufNewFile,BufRead *.yml setlocal ft=ansible

